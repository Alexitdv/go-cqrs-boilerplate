// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: boilderplate/v1/service.proto

package boilerplate

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BoilerplateClient is the client API for Boilerplate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BoilerplateClient interface {
	GetUser(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*User, error)
	AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Identifier, error)
	DeleteUser(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
}

type boilerplateClient struct {
	cc grpc.ClientConnInterface
}

func NewBoilerplateClient(cc grpc.ClientConnInterface) BoilerplateClient {
	return &boilerplateClient{cc}
}

func (c *boilerplateClient) GetUser(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/boilerplate.Boilerplate/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boilerplateClient) AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Identifier, error) {
	out := new(Identifier)
	err := c.cc.Invoke(ctx, "/boilerplate.Boilerplate/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boilerplateClient) DeleteUser(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/boilerplate.Boilerplate/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boilerplateClient) UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/boilerplate.Boilerplate/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boilerplateClient) UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/boilerplate.Boilerplate/UpdatePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boilerplateClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/boilerplate.Boilerplate/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BoilerplateServer is the server API for Boilerplate service.
// All implementations must embed UnimplementedBoilerplateServer
// for forward compatibility
type BoilerplateServer interface {
	GetUser(context.Context, *Identifier) (*User, error)
	AddUser(context.Context, *User) (*Identifier, error)
	DeleteUser(context.Context, *Identifier) (*emptypb.Empty, error)
	UpdateUser(context.Context, *User) (*emptypb.Empty, error)
	UpdatePassword(context.Context, *UpdatePasswordRequest) (*emptypb.Empty, error)
	Login(context.Context, *LoginRequest) (*SimpleResponse, error)
	mustEmbedUnimplementedBoilerplateServer()
}

// UnimplementedBoilerplateServer must be embedded to have forward compatible implementations.
type UnimplementedBoilerplateServer struct {
}

func (UnimplementedBoilerplateServer) GetUser(context.Context, *Identifier) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedBoilerplateServer) AddUser(context.Context, *User) (*Identifier, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedBoilerplateServer) DeleteUser(context.Context, *Identifier) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedBoilerplateServer) UpdateUser(context.Context, *User) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedBoilerplateServer) UpdatePassword(context.Context, *UpdatePasswordRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePassword not implemented")
}
func (UnimplementedBoilerplateServer) Login(context.Context, *LoginRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedBoilerplateServer) mustEmbedUnimplementedBoilerplateServer() {}

// UnsafeBoilerplateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BoilerplateServer will
// result in compilation errors.
type UnsafeBoilerplateServer interface {
	mustEmbedUnimplementedBoilerplateServer()
}

func RegisterBoilerplateServer(s grpc.ServiceRegistrar, srv BoilerplateServer) {
	s.RegisterService(&Boilerplate_ServiceDesc, srv)
}

func _Boilerplate_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoilerplateServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/boilerplate.Boilerplate/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoilerplateServer).GetUser(ctx, req.(*Identifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _Boilerplate_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoilerplateServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/boilerplate.Boilerplate/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoilerplateServer).AddUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Boilerplate_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoilerplateServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/boilerplate.Boilerplate/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoilerplateServer).DeleteUser(ctx, req.(*Identifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _Boilerplate_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoilerplateServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/boilerplate.Boilerplate/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoilerplateServer).UpdateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Boilerplate_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoilerplateServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/boilerplate.Boilerplate/UpdatePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoilerplateServer).UpdatePassword(ctx, req.(*UpdatePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Boilerplate_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoilerplateServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/boilerplate.Boilerplate/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoilerplateServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Boilerplate_ServiceDesc is the grpc.ServiceDesc for Boilerplate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Boilerplate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "boilerplate.Boilerplate",
	HandlerType: (*BoilerplateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _Boilerplate_GetUser_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _Boilerplate_AddUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Boilerplate_DeleteUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Boilerplate_UpdateUser_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _Boilerplate_UpdatePassword_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Boilerplate_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "boilderplate/v1/service.proto",
}
